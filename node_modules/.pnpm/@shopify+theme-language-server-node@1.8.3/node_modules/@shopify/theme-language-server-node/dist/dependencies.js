"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThemeSettingsSchemaForRootURI = exports.getDefaultLocaleFactory = exports.getDefaultTranslationsFactory = exports.loadConfig = exports.fileSize = exports.fileExists = exports.findRootURI = exports.filesForURI = void 0;
const theme_check_node_1 = require("@shopify/theme-check-node");
const vscode_uri_1 = require("vscode-uri");
const node_path_1 = require("node:path");
const fs = __importStar(require("node:fs/promises"));
const node_util_1 = require("node:util");
const glob_1 = require("glob");
const glob = (0, node_util_1.promisify)(glob_1.glob);
function parse(uri) {
    return vscode_uri_1.URI.parse(uri);
}
// uri.path is normalized to forward slashes and is an assumption we use
// inside theme-check-js
function asPath(uri) {
    return uri.path;
}
// Calls to `fs` should be done with this
function asFsPath(uriOrPath) {
    if (vscode_uri_1.URI.isUri(uriOrPath)) {
        return uriOrPath.fsPath;
    }
    else {
        return vscode_uri_1.URI.file(uriOrPath).fsPath;
    }
}
const UriPathHandler = {
    join(base, ...paths) {
        return asFsPath(vscode_uri_1.Utils.joinPath(base, ...paths));
    },
    dirname(uri) {
        return vscode_uri_1.Utils.dirname(uri);
    },
    asPath(uri) {
        return asFsPath(uri);
    },
};
async function findRoot(curr) {
    return (0, theme_check_node_1.reusableFindRoot)(curr, UriPathHandler);
}
const filesForURI = async function filesForURI(uriString) {
    const config = await (0, exports.loadConfig)(uriString);
    const rootPath = asFsPath(config.root);
    return glob(`**/*.{liquid,json}`, { cwd: rootPath, ignore: 'node_modules/**' });
};
exports.filesForURI = filesForURI;
const findRootURI = async function findRootURI(uriString) {
    const uri = parse(uriString);
    const root = await findRoot(uri);
    return root.toString();
};
exports.findRootURI = findRootURI;
const fileExists = async function fileExists(path) {
    try {
        // This will get called within theme-check-common which assumes
        // forward-slashes. We need to denormalize those here.
        await fs.stat(asFsPath(path));
        return true;
    }
    catch (e) {
        return false;
    }
};
exports.fileExists = fileExists;
const fileSize = async function fileSize(absolutePath) {
    try {
        const stats = await fs.stat(asFsPath(absolutePath));
        return stats.size;
    }
    catch (e) {
        throw new Error(`Failed to get file size: ${e}`);
    }
};
exports.fileSize = fileSize;
const loadConfig = async function loadConfig(uriString) {
    const fileUri = parse(uriString);
    const rootUri = await findRoot(fileUri);
    const rootPath = asFsPath(rootUri);
    const configUri = vscode_uri_1.Utils.joinPath(rootUri, '.theme-check.yml');
    const configPath = asFsPath(configUri);
    const extensionConfigPathUri = vscode_uri_1.Utils.joinPath(rootUri, 'shopify.extension.toml');
    const extensionConfigPath = asFsPath(extensionConfigPathUri);
    const [configExists, extensionConfigExists] = await Promise.all([
        (0, exports.fileExists)(configPath),
        (0, exports.fileExists)(extensionConfigPath),
    ]);
    if (configExists) {
        return (0, theme_check_node_1.loadConfig)(configPath, rootPath).then(normalizeRoot);
    }
    else if (extensionConfigExists) {
        return (0, theme_check_node_1.loadConfig)('theme-check:theme-app-extension', rootPath).then(normalizeRoot);
    }
    else {
        return (0, theme_check_node_1.loadConfig)(undefined, rootPath).then(normalizeRoot);
    }
};
exports.loadConfig = loadConfig;
const getDefaultTranslationsFactory = function getDefaultTranslationsFactory(rootURI) {
    const root = parse(rootURI);
    let cachedPromise;
    async function getDefaultTranslations() {
        try {
            const defaultLocale = await getDefaultLocale(root);
            const defaultTranslationsFileUri = vscode_uri_1.Utils.joinPath(root, 'locales', `${defaultLocale}.default.json`);
            const defaultTranslationsFile = await fs.readFile(asFsPath(defaultTranslationsFileUri), 'utf8');
            return JSON.parse(defaultTranslationsFile);
        }
        catch (error) {
            return {};
        }
    }
    return async () => {
        if (!cachedPromise)
            cachedPromise = getDefaultTranslations();
        return cachedPromise;
    };
};
exports.getDefaultTranslationsFactory = getDefaultTranslationsFactory;
const getDefaultLocaleFactory = function getDefaultLocaleFactory(rootURI) {
    const root = parse(rootURI);
    let cachedPromise;
    return async () => {
        if (!cachedPromise)
            cachedPromise = getDefaultLocale(root);
        return cachedPromise;
    };
};
exports.getDefaultLocaleFactory = getDefaultLocaleFactory;
async function getDefaultLocale(rootURI) {
    try {
        const localesFolder = vscode_uri_1.Utils.joinPath(rootURI, 'locales');
        const files = await fs.readdir(asFsPath(localesFolder), {
            encoding: 'utf8',
            withFileTypes: true,
        });
        const defaultLocaleEntry = files.find((dirent) => dirent.isFile() && dirent.name.endsWith('.default.json'));
        return defaultLocaleEntry ? (0, node_path_1.basename)(defaultLocaleEntry.name, '.default.json') : 'en';
    }
    catch (error) {
        return 'en';
    }
}
function normalizeRoot(config) {
    config.root = asPath(vscode_uri_1.URI.file(config.root));
    return config;
}
const getThemeSettingsSchemaForRootURI = async (rootUriString) => {
    try {
        const rootURI = parse(rootUriString);
        const settingsSchemaFilePath = vscode_uri_1.Utils.joinPath(rootURI, 'config/settings_schema.json');
        const contents = await fs.readFile(asFsPath(settingsSchemaFilePath), 'utf8');
        const json = JSON.parse(contents);
        if (!Array.isArray(json)) {
            throw new Error('Settings JSON file not in correct format');
        }
        return json;
    }
    catch (error) {
        console.error(error);
        return [];
    }
};
exports.getThemeSettingsSchemaForRootURI = getThemeSettingsSchemaForRootURI;
//# sourceMappingURL=dependencies.js.map