"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverProvider = void 0;
const theme_check_common_1 = require("@shopify/theme-check-common");
const TypeSystem_1 = require("../TypeSystem");
const providers_1 = require("./providers");
const HtmlAttributeValueHoverProvider_1 = require("./providers/HtmlAttributeValueHoverProvider");
const visitor_1 = require("../visitor");
class HoverProvider {
    constructor(documentManager, themeDocset, getTranslationsForURI = async () => ({}), getSettingsSchemaForURI = async () => []) {
        this.documentManager = documentManager;
        this.themeDocset = themeDocset;
        this.getTranslationsForURI = getTranslationsForURI;
        this.getSettingsSchemaForURI = getSettingsSchemaForURI;
        this.providers = [];
        const typeSystem = new TypeSystem_1.TypeSystem(themeDocset, getSettingsSchemaForURI);
        this.providers = [
            new providers_1.LiquidTagHoverProvider(themeDocset),
            new providers_1.LiquidFilterHoverProvider(themeDocset),
            new providers_1.LiquidObjectHoverProvider(typeSystem),
            new providers_1.LiquidObjectAttributeHoverProvider(typeSystem),
            new providers_1.HtmlTagHoverProvider(),
            new providers_1.HtmlAttributeHoverProvider(),
            new HtmlAttributeValueHoverProvider_1.HtmlAttributeValueHoverProvider(),
            new providers_1.TranslationHoverProvider(getTranslationsForURI, documentManager),
        ];
    }
    async hover(params) {
        var _a;
        const uri = params.textDocument.uri;
        const document = this.documentManager.get(uri);
        // Supports only Liquid resources
        if ((document === null || document === void 0 ? void 0 : document.type) !== theme_check_common_1.SourceCodeType.LiquidHtml || document.ast instanceof Error) {
            return null;
        }
        const [currentNode, ancestors] = (0, visitor_1.findCurrentNode)(document.ast, document.textDocument.offsetAt(params.position));
        const promises = this.providers.map((p) => p.hover(currentNode, ancestors, params));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : null;
    }
}
exports.HoverProvider = HoverProvider;
//# sourceMappingURL=HoverProvider.js.map