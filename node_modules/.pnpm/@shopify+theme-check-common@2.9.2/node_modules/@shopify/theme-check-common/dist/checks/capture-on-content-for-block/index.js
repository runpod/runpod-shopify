"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaptureOnContentForBlock = void 0;
const liquid_html_parser_1 = require("@shopify/liquid-html-parser");
const types_1 = require("../../types");
const markup_1 = require("../../utils/markup");
const utils_1 = require("../utils");
function isLiquidTagCapture(node) {
    return node.name === 'capture' && typeof node.markup !== 'string';
}
exports.CaptureOnContentForBlock = {
    meta: {
        code: 'CaptureOnContentForBlock',
        name: 'Do not capture `content_for "block"`',
        docs: {
            description: 'Capture of content_for "block" is restricted to enforce static block rendering at its expected location.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/content_for_block',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        function checkContentForBlock(node, position) {
            if ((0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.LiquidTag, node) &&
                node.name === 'content_for' &&
                (0, markup_1.isContentForBlock)(node.markup)) {
                context.report({
                    message: 'Do not capture `content_for "block"`',
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        return {
            async LiquidTag(node) {
                if (isLiquidTagCapture(node) && node.children) {
                    for (const child of node.children) {
                        if (child.type === liquid_html_parser_1.NodeTypes.LiquidTag && typeof child.markup == 'string') {
                            checkContentForBlock(child, child.position);
                        }
                    }
                }
            },
            async LiquidVariableOutput(node) {
                if (typeof node.markup === 'string')
                    return;
                if (node.markup.filters.length) {
                    checkContentForBlock(node.markup.expression, node.position);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map