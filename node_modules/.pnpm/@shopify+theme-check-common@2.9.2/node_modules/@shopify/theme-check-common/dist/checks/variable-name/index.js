"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableName = void 0;
const liquid_html_parser_1 = require("@shopify/liquid-html-parser");
const types_1 = require("../../types");
const camelCase_1 = __importDefault(require("lodash/camelCase"));
const kebabCase_1 = __importDefault(require("lodash/kebabCase"));
const snakeCase_1 = __importDefault(require("lodash/snakeCase"));
const pascalCase = (string) => {
    const camelCased = (0, camelCase_1.default)(string);
    return camelCased.charAt(0).toUpperCase() + camelCased.slice(1);
};
const isLiquidTagAssign = (node) => {
    return node.name === 'assign' && typeof node.markup !== 'string';
};
const isLiquidTagCapture = (node) => {
    return (node.type == liquid_html_parser_1.NodeTypes.LiquidTag && node.name === 'capture' && typeof node.markup !== 'string');
};
const formatTypes = {
    camelCase: camelCase_1.default,
    PascalCase: pascalCase,
    snake_case: snakeCase_1.default,
    'kebab-case': kebabCase_1.default,
};
const schema = {
    format: types_1.SchemaProp.string('snake_case'),
};
exports.VariableName = {
    meta: {
        code: 'VariableName',
        name: 'Invalid variable naming format',
        docs: {
            description: 'This check is aimed at using certain variable naming conventions',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/variable-name',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema,
        targets: [],
    },
    create(context) {
        const formatter = (node) => {
            if (!node.markup.name) {
                return {
                    valid: false,
                };
            }
            const suggestion = formatTypes[context.settings.format]
                .call(null, node.markup.name)
                .replace(/(\d+)[-_](?=[a-z])/g, '$1');
            return {
                valid: node.markup.name === suggestion,
                suggestion,
            };
        };
        const reportHandler = (node) => {
            return context.report({
                message: `The variable '${node.markup.name}' uses wrong naming format`,
                startIndex: node.markup.position.start,
                endIndex: node.markup.position.end,
                suggest: [
                    {
                        message: `Change variable '${node.markup.name}' to '${formatter(node).suggestion}'`,
                        fix: (corrector) => {
                            const { position, name, source } = node.markup;
                            return corrector.replace(position.start, position.end, source
                                .slice(position.start, position.end)
                                .replace(name, formatter(node).suggestion));
                        },
                    },
                ],
            });
        };
        return {
            async LiquidTag(node) {
                if (isLiquidTagAssign(node)) {
                    if (!formatter(node).valid) {
                        reportHandler(node);
                    }
                }
                else if (isLiquidTagCapture(node) && node.markup.name) {
                    if (!formatter(node).valid) {
                        reportHandler(node);
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map