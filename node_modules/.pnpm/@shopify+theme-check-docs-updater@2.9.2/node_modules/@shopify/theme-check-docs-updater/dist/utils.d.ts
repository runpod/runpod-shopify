export type Logger = (message: string) => void;
export declare const noop: () => void;
export declare const identity: <T>(x: T) => T;
export declare const tap: <T>(tappingFunction: (x: T) => void) => (x: T) => T;
/** Returns a cached version of a function. Only caches one result. */
export declare function memo<F extends (...args: any[]) => any>(fn: F): (...args: ArgumentTypes<F>) => ReturnType<F>;
export declare function memoize<AT, F extends (arg: AT) => any, RT extends ReturnType<F>>(fn: F, keyFn: (arg: AT) => string): (arg: AT) => RT;
/**
 * ArgumentTypes extracts the type of the arguments of a function.
 *
 * @example
 *
 * function doStuff(a: number, b: string) {
 *   // do stuff
 * }
 *
 * type DoStuffArgs = ArgumentTypes<typeof doStuff> // = [number, string].
 */
type ArgumentTypes<F extends Function> = F extends (...args: infer T) => void ? T : never;
export {};
