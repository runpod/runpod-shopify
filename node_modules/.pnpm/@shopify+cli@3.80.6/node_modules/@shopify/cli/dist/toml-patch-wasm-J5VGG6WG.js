import {
  __commonJS,
  __require,
  __toESM,
  init_cjs_shims
} from "./chunk-PKR7KJ6P.js";

// ../../node_modules/.pnpm/@shopify+toml-patch@0.3.0/node_modules/@shopify/toml-patch/toml_patch.js
var require_toml_patch = __commonJS({
  "../../node_modules/.pnpm/@shopify+toml-patch@0.3.0/node_modules/@shopify/toml-patch/toml_patch.js"(exports, module) {
    init_cjs_shims();
    var imports = {};
    imports.__wbindgen_placeholder__ = module.exports;
    var wasm, { TextEncoder, TextDecoder } = __require("util");
    function isLikeNone(x) {
      return x == null;
    }
    var cachedDataViewMemory0 = null;
    function getDataViewMemory0() {
      return (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === !0 || cachedDataViewMemory0.buffer.detached === void 0 && cachedDataViewMemory0.buffer !== wasm.memory.buffer) && (cachedDataViewMemory0 = new DataView(wasm.memory.buffer)), cachedDataViewMemory0;
    }
    var WASM_VECTOR_LEN = 0, cachedUint8ArrayMemory0 = null;
    function getUint8ArrayMemory0() {
      return (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) && (cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer)), cachedUint8ArrayMemory0;
    }
    var cachedTextEncoder = new TextEncoder("utf-8"), encodeString = typeof cachedTextEncoder.encodeInto == "function" ? function(arg, view) {
      return cachedTextEncoder.encodeInto(arg, view);
    } : function(arg, view) {
      let buf = cachedTextEncoder.encode(arg);
      return view.set(buf), {
        read: arg.length,
        written: buf.length
      };
    };
    function passStringToWasm0(arg, malloc, realloc) {
      if (realloc === void 0) {
        let buf = cachedTextEncoder.encode(arg), ptr2 = malloc(buf.length, 1) >>> 0;
        return getUint8ArrayMemory0().subarray(ptr2, ptr2 + buf.length).set(buf), WASM_VECTOR_LEN = buf.length, ptr2;
      }
      let len = arg.length, ptr = malloc(len, 1) >>> 0, mem = getUint8ArrayMemory0(), offset = 0;
      for (; offset < len; offset++) {
        let code = arg.charCodeAt(offset);
        if (code > 127) break;
        mem[ptr + offset] = code;
      }
      if (offset !== len) {
        offset !== 0 && (arg = arg.slice(offset)), ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        let view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len), ret = encodeString(arg, view);
        offset += ret.written, ptr = realloc(ptr, len, offset, 1) >>> 0;
      }
      return WASM_VECTOR_LEN = offset, ptr;
    }
    var cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: !0, fatal: !0 });
    cachedTextDecoder.decode();
    function getStringFromWasm0(ptr, len) {
      return ptr = ptr >>> 0, cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
    }
    function takeFromExternrefTable0(idx) {
      let value = wasm.__wbindgen_export_0.get(idx);
      return wasm.__externref_table_dealloc(idx), value;
    }
    module.exports.echoToml = function(tomlContent) {
      let deferred3_0, deferred3_1;
      try {
        let ptr0 = passStringToWasm0(tomlContent, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc), len0 = WASM_VECTOR_LEN, ret = wasm.echoToml(ptr0, len0);
        var ptr2 = ret[0], len2 = ret[1];
        if (ret[3])
          throw ptr2 = 0, len2 = 0, takeFromExternrefTable0(ret[2]);
        return deferred3_0 = ptr2, deferred3_1 = len2, getStringFromWasm0(ptr2, len2);
      } finally {
        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);
      }
    };
    module.exports.updateTomlValues = function(tomlContent, patches) {
      let deferred3_0, deferred3_1;
      try {
        let ptr0 = passStringToWasm0(tomlContent, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc), len0 = WASM_VECTOR_LEN, ret = wasm.updateTomlValues(ptr0, len0, patches);
        var ptr2 = ret[0], len2 = ret[1];
        if (ret[3])
          throw ptr2 = 0, len2 = 0, takeFromExternrefTable0(ret[2]);
        return deferred3_0 = ptr2, deferred3_1 = len2, getStringFromWasm0(ptr2, len2);
      } finally {
        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);
      }
    };
    module.exports.__wbg_from_2a5d3e218e67aa85 = function(arg0) {
      return Array.from(arg0);
    };
    module.exports.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {
      return arg0[arg1 >>> 0];
    };
    module.exports.__wbg_length_e2d2a49132c1b256 = function(arg0) {
      return arg0.length;
    };
    module.exports.__wbindgen_boolean_get = function(arg0) {
      let v = arg0;
      return typeof v == "boolean" ? v ? 1 : 0 : 2;
    };
    module.exports.__wbindgen_init_externref_table = function() {
      let table = wasm.__wbindgen_export_0, offset = table.grow(4);
      table.set(0, void 0), table.set(offset + 0, void 0), table.set(offset + 1, null), table.set(offset + 2, !0), table.set(offset + 3, !1);
    };
    module.exports.__wbindgen_is_array = function(arg0) {
      return Array.isArray(arg0);
    };
    module.exports.__wbindgen_is_undefined = function(arg0) {
      return arg0 === void 0;
    };
    module.exports.__wbindgen_number_get = function(arg0, arg1) {
      let obj = arg1, ret = typeof obj == "number" ? obj : void 0;
      getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, !0), getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), !0);
    };
    module.exports.__wbindgen_string_get = function(arg0, arg1) {
      let obj = arg1, ret = typeof obj == "string" ? obj : void 0;
      var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc), len1 = WASM_VECTOR_LEN;
      getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, !0), getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, !0);
    };
    module.exports.__wbindgen_string_new = function(arg0, arg1) {
      return getStringFromWasm0(arg0, arg1);
    };
    module.exports.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    var path = __require("path").join(__dirname, "toml_patch_bg.wasm"), bytes = __require("fs").readFileSync(path), wasmModule = new WebAssembly.Module(bytes), wasmInstance = new WebAssembly.Instance(wasmModule, imports);
    wasm = wasmInstance.exports;
    module.exports.__wasm = wasm;
    wasm.__wbindgen_start();
  }
});

// ../app/dist/cli/services/app/toml-patch-wasm.js
init_cjs_shims();
var tomlPatch = __toESM(require_toml_patch(), 1);
async function updateTomlValues2(tomlContent, patches) {
  return tomlPatch.updateTomlValues(tomlContent, patches);
}
export {
  updateTomlValues2 as updateTomlValues
};
//# sourceMappingURL=toml-patch-wasm-J5VGG6WG.js.map
