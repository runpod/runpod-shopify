import { fileExists, readFile, matchGlob as originalMatchGlob } from '@shopify/cli-kit/node/fs';
import { outputDebug, outputWarn } from '@shopify/cli-kit/node/output';
import { joinPath } from '@shopify/cli-kit/node/path';
const SHOPIFY_IGNORE = '.shopifyignore';
export async function applyIgnoreFilters(themeChecksums, themeFileSystem, options = {}) {
    const shopifyIgnore = await shopifyIgnoredPatterns(themeFileSystem);
    return themeChecksums
        .filter(filterBy(shopifyIgnore, '.shopifyignore'))
        .filter(filterBy(options.ignore, '--ignore'))
        .filter(filterBy(options.only, '--only', true));
}
function filterBy(patterns, type, invertMatch = false) {
    return ({ key }) => {
        if (!patterns)
            return true;
        const match = patterns.some((pattern) => matchGlob(key, pattern) || regexMatch(key, pattern));
        const shouldIgnore = invertMatch ? !match : match;
        if (shouldIgnore) {
            outputDebug(`Ignoring theme file ${key} via ${type}...`);
            return false;
        }
        return true;
    };
}
async function shopifyIgnoredPatterns({ root }) {
    const shopifyIgnorePath = joinPath(root, SHOPIFY_IGNORE);
    const shopifyIgnoreExists = await fileExists(shopifyIgnorePath);
    if (!shopifyIgnoreExists)
        return [];
    const content = await readFile(shopifyIgnorePath, { encoding: 'utf8' });
    return content
        .split(/(\r\n|\r|\n)/)
        .map((line) => line.trim())
        .filter((line) => line && !line.startsWith('#'));
}
function matchGlob(key, pattern) {
    const result = originalMatchGlob(key, pattern);
    if (result)
        return true;
    // When the the standard match fails and the pattern includes '/*.', we
    // replace '/*.' with '/**/*.' to emulate Shopify CLI 2.x behavior, as it was
    // based on 'File.fnmatch'.
    if (pattern.includes('/*.')) {
        outputWarn(`The pattern ${pattern} is unsafe, please use a valid regex or glob.`);
        return originalMatchGlob(key, pattern.replace('/*.', '/**/*.'));
    }
    return false;
}
function regexMatch(key, pattern) {
    try {
        return key.match(pattern);
        // eslint-disable-next-line no-catch-all/no-catch-all
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=asset-ignore.js.map