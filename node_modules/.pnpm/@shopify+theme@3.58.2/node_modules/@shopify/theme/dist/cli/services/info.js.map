{"version":3,"file":"info.js","sourceRoot":"","sources":["../../../src/cli/services/info.ts"],"names":[],"mappings":"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","sourcesContent":["import {getDevelopmentTheme, getThemeStore} from './local-storage.js'\nimport {findOrSelectTheme} from '../utilities/theme-selector.js'\nimport {DevelopmentThemeManager} from '../utilities/development-theme-manager.js'\nimport {platformAndArch} from '@shopify/cli-kit/node/os'\nimport {version as rubyVersion} from '@shopify/cli-kit/node/ruby'\nimport {checkForNewVersion} from '@shopify/cli-kit/node/node-package-manager'\nimport {themeEditorUrl, themePreviewUrl} from '@shopify/cli-kit/node/themes/urls'\nimport {Theme} from '@shopify/cli-kit/node/themes/types'\nimport {AdminSession} from '@shopify/cli-kit/node/session'\nimport {linesToColumns} from '@shopify/cli-kit/common/string'\nimport {OutputMessage, formatSection, getOutputUpdateCLIReminder} from '@shopify/cli-kit/node/output'\n\nexport interface ThemeInfo {\n  theme: {\n    id: number\n    name: string\n    role: string\n    shop: string\n    editor_url: string\n    preview_url: string\n  }\n}\n\nexport interface ThemeInfoOptions {\n  store?: string\n  password?: string\n  environment?: string\n  development?: boolean\n  theme?: string\n  json?: boolean\n}\n\nexport function themeInfoJSON(theme: Theme, adminSession: AdminSession): ThemeInfo {\n  return {\n    theme: {\n      id: theme.id,\n      name: theme.name,\n      role: theme.role,\n      shop: adminSession.storeFqdn,\n      preview_url: themePreviewUrl(theme, adminSession),\n      editor_url: themeEditorUrl(theme, adminSession),\n    },\n  }\n}\n\nexport async function fetchThemeInfo(\n  adminSession: AdminSession,\n  options: ThemeInfoOptions,\n): Promise<ThemeInfo | undefined> {\n  let theme\n  if (options.development) {\n    const developmentThemeManager = new DevelopmentThemeManager(adminSession)\n    theme = await developmentThemeManager.findOrCreate()\n  } else {\n    const filter = {filter: {theme: options.theme}}\n    theme = await findOrSelectTheme(adminSession, filter)\n  }\n  return theme ? themeInfoJSON(theme, adminSession) : undefined\n}\n\nexport async function fetchDevInfo(config: {cliVersion: string}): Promise<OutputMessage> {\n  const sections: [string, string][] = [devConfigSection(), await systemInfoSection(config)]\n  const message = sections.map((sectionContents) => formatSection(...sectionContents)).join('\\n\\n')\n  return message\n}\n\nfunction devConfigSection(): [string, string] {\n  const title = 'Theme Configuration'\n  const store = getThemeStore() || 'Not configured'\n  let developmentTheme = getDevelopmentTheme()\n  developmentTheme = developmentTheme ? `#${developmentTheme}` : 'Not set'\n  const lines: string[][] = [\n    ['Store', store],\n    ['Development Theme ID', developmentTheme],\n  ]\n  return [title, `${linesToColumns(lines)}`]\n}\n\nasync function systemInfoSection(config: {cliVersion: string}): Promise<[string, string]> {\n  const title = 'Tooling and System'\n  const {platform, arch} = platformAndArch()\n  const ruby = (await rubyVersion()) || 'Not installed'\n  const lines: string[][] = [\n    ['Shopify CLI', await cliVersionInfo(config)],\n    ['OS', `${platform}-${arch}`],\n    ['Shell', process.env.SHELL || 'unknown'],\n    ['Node version', process.version],\n    ['Ruby version', ruby],\n  ]\n  return [title, `${linesToColumns(lines)}`]\n}\n\nasync function cliVersionInfo(config: {cliVersion: string}): Promise<string> {\n  const dependency = '@shopify/cli'\n  const newestVersion = await checkForNewVersion(dependency, config.cliVersion)\n  if (!newestVersion) return config.cliVersion\n  const upgradeMessage = getOutputUpdateCLIReminder(undefined, newestVersion)\n  return [config.cliVersion, upgradeMessage].join(' ').trim()\n}\n"]}