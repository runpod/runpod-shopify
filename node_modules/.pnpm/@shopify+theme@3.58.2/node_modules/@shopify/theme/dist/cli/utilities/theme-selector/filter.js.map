{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../src/cli/utilities/theme-selector/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import {ALLOWED_ROLES} from './fetch.js'\nimport {Theme} from '@shopify/cli-kit/node/themes/types'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nexport function filterThemes(store: string, themes: Theme[], filter: Filter): Theme[] {\n  return filterByRole(store, themes, filter) || filterByTheme(store, themes, filter)\n}\n\nfunction filterByRole(store: string, themes: Theme[], filter: Filter) {\n  const role = filter.role\n\n  if (!role) {\n    return\n  }\n\n  const error = `The ${store} store doesn't have a theme with the \"${role}\" role`\n\n  return filterArray(themes, (theme) => {\n    return theme.role === role\n  }).orThrow(error)\n}\n\nfunction filterByTheme(store: string, themes: Theme[], filter: Filter) {\n  const identifiers = filter.themeIdentifiers\n\n  return identifiers.flatMap((identifier) => {\n    const error = `The ${store} store doesn't have a theme with the \"${identifier}\" ID or name`\n\n    return filterArray(themes, (theme) => {\n      return `${theme.id}` === identifier || theme.name.toLowerCase().includes(identifier.toLowerCase())\n    }).orThrow(error)\n  })\n}\n\nfunction filterArray(\n  themes: Theme[],\n  predicate: (theme: Theme) => boolean,\n): {orThrow: (error: string) => Theme[] | never} {\n  const filteredThemes = themes.filter(predicate)\n\n  if (filteredThemes.length > 0) {\n    return {orThrow: (_errorMessage: string) => filteredThemes}\n  }\n\n  return {\n    orThrow: (errorMessage: string) => {\n      throw new AbortError(errorMessage)\n    },\n  }\n}\n\n/**\n * {@link Theme} ID or name\n */\nexport type ThemeIdentifier = string\n\nexport interface FilterProps {\n  themes?: ThemeIdentifier[]\n  theme?: ThemeIdentifier\n  development?: boolean\n  live?: boolean\n  unpublished?: boolean\n}\n\nexport class Filter {\n  constructor(public queryProps: FilterProps) {}\n\n  get role() {\n    for (const role of ALLOWED_ROLES) {\n      if (this.queryProps[role]) {\n        return role\n      }\n    }\n  }\n\n  get themeIdentifiers() {\n    const identifiers = [this.queryProps.theme, this.queryProps.themes]\n\n    return identifiers.flat().filter((i): i is string => Boolean(i))\n  }\n\n  any() {\n    return Object.values(this.queryProps).some((val) => {\n      if (val?.length !== undefined) {\n        return val.length > 0\n      }\n\n      return Boolean(val)\n    })\n  }\n}\n"]}