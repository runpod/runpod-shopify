{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../src/cli/commands/theme/check.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,gBAAgB,CAAA;AACzC,OAAO,EACL,kBAAkB,EAClB,aAAa,EACb,UAAU,EACV,UAAU,EACV,kBAAkB,EAClB,kBAAkB,EAClB,gBAAgB,EAChB,kBAAkB,EAClB,YAAY,EACZ,qBAAqB,GAEtB,MAAM,yBAAyB,CAAA;AAChC,OAAO,YAAY,MAAM,kCAAkC,CAAA;AAC3D,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAA;AACrD,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAA;AACvD,OAAO,EAAC,UAAU,EAAE,aAAa,EAAC,MAAM,0BAA0B,CAAA;AAClE,OAAO,EAAC,aAAa,EAAE,iBAAiB,EAAC,MAAM,2BAA2B,CAAA;AAC1E,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAA;AACnD,OAAO,EAAC,eAAe,EAAE,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AACpE,OAAO,EAAC,iBAAiB,EAAC,MAAM,4CAA4C,CAAA;AAE5E,MAAqB,KAAM,SAAQ,YAAY;IAgE7C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,CAAA;QAEvC,+DAA+D;QAC/D,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAA;QACvB,wDAAwD;QACxD,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;QACpG,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,MAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAA;QAE5F,IAAI,KAAK,CAAC,IAAI,EAAE;YACd,MAAM,UAAU,CAAC,IAAI,CAAC,CAAA;YAEtB,uDAAuD;YACvD,OAAM;SACP;QAED,IAAI,KAAK,CAAC,OAAO,EAAE;YACjB,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,kBAAkB,EAAE,cAAc,CAAC,EAAE;gBAC7G,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;aACtC,CAAC,CAAA;YAEF,IAAI,OAAO,GAAG,SAAS,CAAA;YACvB,IAAI,WAAW,EAAE;gBACf,OAAO,GAAG,CAAC,MAAM,iBAAiB,CAAC,WAAW,CAAC,CAAC,IAAI,SAAS,CAAA;aAC9D;YAED,UAAU,CAAC,OAAO,CAAC,CAAA;YAEnB,0DAA0D;YAC1D,OAAM;SACP;QAED,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,MAAM,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YAEtC,wDAAwD;YACxD,OAAM;SACP;QAED,IAAI,KAAK,CAAC,IAAI,EAAE;YACd,MAAM,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YAEtC,uDAAuD;YACvD,OAAM;SACP;QAED,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAE3D,MAAM,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAA;QAE7C,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;YAC3B,kBAAkB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAA;YAExC,4CAA4C;YAC5C,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAA;YAE3D,MAAM,CAAC;gBACL,QAAQ,EAAE,sBAAsB;gBAChC,IAAI,EAAE,aAAa,CAAC,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC;aACrD,CAAC,CAAA;SACH;QAED,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;YAC3B;;;;;;;;;eASG;YACH,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;YAC7B,IAAI,qBAAqB,CAAC,MAAM,CAAC,EAAE;gBACjC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;aACjC;YAED,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;SAC/D;QAED,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE;YACzB,MAAM,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;SACxC;QAED,OAAO,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,YAAY,CAAc,CAAC,CAAA;IAC/D,CAAC;;;AAtJM,aAAO,GAAG,qBAAqB,AAAxB,CAAwB;AAE/B,6BAAuB,GAAG,qSAAqS,AAAxS,CAAwS;AAE/T,iBAAW,GAAG,EAAI,CAAC,0BAA0B,EAAE,AAApC,CAAoC;AAE/C,WAAK,GAAG;IACb,GAAG,WAAW;IACd,IAAI,EAAE,UAAU,CAAC,IAAI;IACrB,cAAc,EAAE,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,4BAA4B;QACzC,GAAG,EAAE,2BAA2B;KACjC,CAAC;IACF,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC;QACnB,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE;;;2EAGwD;QACrE,GAAG,EAAE,qBAAqB;KAC3B,CAAC;IACF,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC;QACzB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,2CAA2C;QACxD,GAAG,EAAE,yBAAyB;QAC9B,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;QACrE,OAAO,EAAE,OAAO;KACjB,CAAC;IACF,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;QAClB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,kCAAkC;QAC/C,GAAG,EAAE,mBAAmB;KACzB,CAAC;IACF,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;QAClB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,qBAAqB;QAClC,GAAG,EAAE,mBAAmB;KACzB,CAAC;IACF,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC;QACnB,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,0BAA0B;QACvC,GAAG,EAAE,qBAAqB;QAC1B,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;QACzB,OAAO,EAAE,MAAM;KAChB,CAAC;IACF,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;QACnB,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,gCAAgC;QAC7C,GAAG,EAAE,oBAAoB;KAC1B,CAAC;IACF,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC;QACrB,IAAI,EAAE,GAAG;QACT,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,2BAA2B;QACxC,GAAG,EAAE,sBAAsB;KAC5B,CAAC;IACF,WAAW,EAAE,UAAU,CAAC,WAAW;CACpC,AAvDW,CAuDX;eA9DkB,KAAK","sourcesContent":["import {themeFlags} from '../../flags.js'\nimport {\n  formatOffensesJson,\n  formatSummary,\n  handleExit,\n  initConfig,\n  outputActiveChecks,\n  outputActiveConfig,\n  performAutoFixes,\n  renderOffensesText,\n  sortOffenses,\n  isExtendedWriteStream,\n  type FailLevel,\n} from '../../services/check.js'\nimport ThemeCommand from '../../utilities/theme-command.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\nimport {renderInfo, renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {themeCheckRun, LegacyIdentifiers} from '@shopify/theme-check-node'\nimport {findPathUp} from '@shopify/cli-kit/node/fs'\nimport {moduleDirectory, joinPath} from '@shopify/cli-kit/node/path'\nimport {getPackageVersion} from '@shopify/cli-kit/node/node-package-manager'\n\nexport default class Check extends ThemeCommand {\n  static summary = 'Validate the theme.'\n\n  static descriptionWithMarkdown = `Calls and runs [Theme Check](https://shopify.dev/docs/themes/tools/theme-check) to analyze your theme code for errors and to ensure that it follows theme and Liquid best practices. [Learn more about the checks that Theme Check runs.](https://shopify.dev/docs/themes/tools/theme-check/checks)`\n\n  static description = this.descriptionWithoutMarkdown()\n\n  static flags = {\n    ...globalFlags,\n    path: themeFlags.path,\n    'auto-correct': Flags.boolean({\n      char: 'a',\n      required: false,\n      description: 'Automatically fix offenses',\n      env: 'SHOPIFY_FLAG_AUTO_CORRECT',\n    }),\n    config: Flags.string({\n      char: 'C',\n      required: false,\n      description: `Use the config provided, overriding .theme-check.yml if present\n      Supports all theme-check: config values, e.g., theme-check:theme-app-extension,\n      theme-check:recommended, theme-check:all\n      For backwards compatibility, :theme_app_extension is also supported `,\n      env: 'SHOPIFY_FLAG_CONFIG',\n    }),\n    'fail-level': Flags.string({\n      required: false,\n      description: 'Minimum severity for exit with error code',\n      env: 'SHOPIFY_FLAG_FAIL_LEVEL',\n      options: ['crash', 'error', 'suggestion', 'style', 'warning', 'info'],\n      default: 'error',\n    }),\n    init: Flags.boolean({\n      required: false,\n      description: 'Generate a .theme-check.yml file',\n      env: 'SHOPIFY_FLAG_INIT',\n    }),\n    list: Flags.boolean({\n      required: false,\n      description: 'List enabled checks',\n      env: 'SHOPIFY_FLAG_LIST',\n    }),\n    output: Flags.string({\n      char: 'o',\n      required: false,\n      description: 'The output format to use',\n      env: 'SHOPIFY_FLAG_OUTPUT',\n      options: ['text', 'json'],\n      default: 'text',\n    }),\n    print: Flags.boolean({\n      required: false,\n      description: 'Output active config to STDOUT',\n      env: 'SHOPIFY_FLAG_PRINT',\n    }),\n    version: Flags.boolean({\n      char: 'v',\n      required: false,\n      description: 'Print Theme Check version',\n      env: 'SHOPIFY_FLAG_VERSION',\n    }),\n    environment: themeFlags.environment,\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Check)\n\n    // Its not clear to typescript that path will always be defined\n    const path = flags.path\n    // To support backwards compatibility for legacy configs\n    const isLegacyConfig = flags.config?.startsWith(':') && LegacyIdentifiers.has(flags.config.slice(1))\n    const config = isLegacyConfig ? LegacyIdentifiers.get(flags.config!.slice(1)) : flags.config\n\n    if (flags.init) {\n      await initConfig(path)\n\n      // --init should not trigger full theme check operation\n      return\n    }\n\n    if (flags.version) {\n      const pkgJsonPath = await findPathUp(joinPath('node_modules', '@shopify', 'theme-check-node', 'package.json'), {\n        type: 'file',\n        cwd: moduleDirectory(import.meta.url),\n      })\n\n      let version = 'unknown'\n      if (pkgJsonPath) {\n        version = (await getPackageVersion(pkgJsonPath)) || 'unknown'\n      }\n\n      outputInfo(version)\n\n      // --version should not trigger full theme check operation\n      return\n    }\n\n    if (flags.print) {\n      await outputActiveConfig(path, config)\n\n      // --print should not trigger full theme check operation\n      return\n    }\n\n    if (flags.list) {\n      await outputActiveChecks(path, config)\n\n      // --list should not trigger full theme check operation\n      return\n    }\n\n    const {offenses, theme} = await themeCheckRun(path, config)\n\n    const offensesByFile = sortOffenses(offenses)\n\n    if (flags.output === 'text') {\n      renderOffensesText(offensesByFile, path)\n\n      // Use renderSuccess when theres no offenses\n      const render = offenses.length ? renderInfo : renderSuccess\n\n      render({\n        headline: 'Theme Check Summary.',\n        body: formatSummary(offenses, offensesByFile, theme),\n      })\n    }\n\n    if (flags.output === 'json') {\n      /**\n       * Workaround:\n       * Force stdout to be blocking so that the JSON output is not broken when piped to another process.\n       * ie: ` | jq .`\n       * It turns out that console.log is technically asynchronous, and when we call process.exit(),\n       * node doesn't wait on all the output being sent to stdout and instead closes the process immediately\n       *\n       * https://github.com/pnp/cli-microsoft365/issues/1266#issuecomment-727254264\n       *\n       */\n      const stdout = process.stdout\n      if (isExtendedWriteStream(stdout)) {\n        stdout._handle.setBlocking(true)\n      }\n\n      outputInfo(JSON.stringify(formatOffensesJson(offensesByFile)))\n    }\n\n    if (flags['auto-correct']) {\n      await performAutoFixes(theme, offenses)\n    }\n\n    return handleExit(offenses, flags['fail-level'] as FailLevel)\n  }\n}\n"]}