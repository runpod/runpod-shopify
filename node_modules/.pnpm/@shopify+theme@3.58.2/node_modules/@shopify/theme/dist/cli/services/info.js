import { getDevelopmentTheme, getThemeStore } from './local-storage.js';
import { findOrSelectTheme } from '../utilities/theme-selector.js';
import { DevelopmentThemeManager } from '../utilities/development-theme-manager.js';
import { platformAndArch } from '@shopify/cli-kit/node/os';
import { version as rubyVersion } from '@shopify/cli-kit/node/ruby';
import { checkForNewVersion } from '@shopify/cli-kit/node/node-package-manager';
import { themeEditorUrl, themePreviewUrl } from '@shopify/cli-kit/node/themes/urls';
import { linesToColumns } from '@shopify/cli-kit/common/string';
import { formatSection, getOutputUpdateCLIReminder } from '@shopify/cli-kit/node/output';
export function themeInfoJSON(theme, adminSession) {
    return {
        theme: {
            id: theme.id,
            name: theme.name,
            role: theme.role,
            shop: adminSession.storeFqdn,
            preview_url: themePreviewUrl(theme, adminSession),
            editor_url: themeEditorUrl(theme, adminSession),
        },
    };
}
export async function fetchThemeInfo(adminSession, options) {
    let theme;
    if (options.development) {
        const developmentThemeManager = new DevelopmentThemeManager(adminSession);
        theme = await developmentThemeManager.findOrCreate();
    }
    else {
        const filter = { filter: { theme: options.theme } };
        theme = await findOrSelectTheme(adminSession, filter);
    }
    return theme ? themeInfoJSON(theme, adminSession) : undefined;
}
export async function fetchDevInfo(config) {
    const sections = [devConfigSection(), await systemInfoSection(config)];
    const message = sections.map((sectionContents) => formatSection(...sectionContents)).join('\n\n');
    return message;
}
function devConfigSection() {
    const title = 'Theme Configuration';
    const store = getThemeStore() || 'Not configured';
    let developmentTheme = getDevelopmentTheme();
    developmentTheme = developmentTheme ? `#${developmentTheme}` : 'Not set';
    const lines = [
        ['Store', store],
        ['Development Theme ID', developmentTheme],
    ];
    return [title, `${linesToColumns(lines)}`];
}
async function systemInfoSection(config) {
    const title = 'Tooling and System';
    const { platform, arch } = platformAndArch();
    const ruby = (await rubyVersion()) || 'Not installed';
    const lines = [
        ['Shopify CLI', await cliVersionInfo(config)],
        ['OS', `${platform}-${arch}`],
        ['Shell', process.env.SHELL || 'unknown'],
        ['Node version', process.version],
        ['Ruby version', ruby],
    ];
    return [title, `${linesToColumns(lines)}`];
}
async function cliVersionInfo(config) {
    const dependency = '@shopify/cli';
    const newestVersion = await checkForNewVersion(dependency, config.cliVersion);
    if (!newestVersion)
        return config.cliVersion;
    const upgradeMessage = getOutputUpdateCLIReminder(undefined, newestVersion);
    return [config.cliVersion, upgradeMessage].join(' ').trim();
}
//# sourceMappingURL=info.js.map