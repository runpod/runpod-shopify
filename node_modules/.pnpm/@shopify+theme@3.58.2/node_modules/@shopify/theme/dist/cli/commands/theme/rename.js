var _a;
import ThemeCommand from '../../utilities/theme-command.js';
import { renameTheme } from '../../services/rename.js';
import { ensureThemeStore } from '../../utilities/theme-store.js';
import { themeFlags } from '../../flags.js';
import { Flags } from '@oclif/core';
import { globalFlags } from '@shopify/cli-kit/node/cli';
import { ensureAuthenticatedThemes } from '@shopify/cli-kit/node/session';
class Rename extends ThemeCommand {
    async run() {
        const { flags } = await this.parse(_a);
        const { password, development, name, theme, live } = flags;
        const store = ensureThemeStore(flags);
        const adminSession = await ensureAuthenticatedThemes(store, password);
        const renameOptions = {
            newName: name,
            development,
            theme,
            live,
        };
        await renameTheme(adminSession, renameOptions);
    }
}
_a = Rename;
Rename.summary = 'Renames an existing theme.';
Rename.descriptionWithMarkdown = `Renames a theme in your store.

  If no theme is specified, then you're prompted to select the theme that you want to rename from the list of themes in your store.
  `;
Rename.description = _a.descriptionWithoutMarkdown();
Rename.flags = {
    ...globalFlags,
    store: themeFlags.store,
    password: themeFlags.password,
    environment: themeFlags.environment,
    name: Flags.string({
        char: 'n',
        description: 'The new name for the theme.',
        env: 'SHOPIFY_FLAG_NEW_NAME',
        required: true,
    }),
    development: Flags.boolean({
        char: 'd',
        description: 'Rename your development theme.',
        env: 'SHOPIFY_FLAG_DEVELOPMENT',
    }),
    theme: Flags.string({
        char: 't',
        description: 'Theme ID or name of the remote theme.',
        env: 'SHOPIFY_FLAG_THEME_ID',
    }),
    live: Flags.boolean({
        char: 'l',
        description: 'Rename your remote live theme.',
        env: 'SHOPIFY_FLAG_LIVE',
    }),
};
export default Rename;
//# sourceMappingURL=rename.js.map