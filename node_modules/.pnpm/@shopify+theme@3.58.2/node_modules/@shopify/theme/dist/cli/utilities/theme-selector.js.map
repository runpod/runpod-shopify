{"version":3,"file":"theme-selector.js","sourceRoot":"","sources":["../../../src/cli/utilities/theme-selector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAA;AAC1D,OAAO,EAAC,MAAM,EAAe,YAAY,EAAC,MAAM,4BAA4B,CAAA;AAC5E,OAAO,EAAC,mBAAmB,EAAC,MAAM,8BAA8B,CAAA;AAChE,OAAO,EAAC,kBAAkB,EAAC,MAAM,0BAA0B,CAAA;AAE3D,OAAO,EAAC,UAAU,EAAC,MAAM,gCAAgC,CAAA;AAEzD;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,OAAqB,EAAE,OAA+C;IAC5G,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAC9C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IACzC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAA;IAE/B,IAAI,MAAM,CAAC,GAAG,EAAE,EAAE;QAChB,OAAO,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAE,CAAA;KAC/C;IAED,OAAO,kBAAkB,CAAC;QACxB,OAAO,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;QAC7B,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5B,MAAM,UAAU,GAAG,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,mBAAmB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YAElF,OAAO;gBACL,KAAK,EAAE,KAAK;gBACZ,KAAK,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,UAAU,EAAE;gBACnC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;aAC9B,CAAA;QACH,CAAC,CAAC;KACH,CAAC,CAAA;AACJ,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,OAAqB,EAAE,WAAwB;IAC9E,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAC9C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,CAAA;IACtC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAA;IAE/B,IAAI,MAAM,CAAC,GAAG,EAAE,EAAE;QAChB,OAAO,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;KAC3C;IAED,OAAO,EAAE,CAAA;AACX,CAAC","sourcesContent":["import {fetchStoreThemes} from './theme-selector/fetch.js'\nimport {Filter, FilterProps, filterThemes} from './theme-selector/filter.js'\nimport {getDevelopmentTheme} from '../services/local-storage.js'\nimport {renderSelectPrompt} from '@shopify/cli-kit/node/ui'\nimport {AdminSession} from '@shopify/cli-kit/node/session'\nimport {capitalize} from '@shopify/cli-kit/common/string'\n\n/**\n * Finds or selects a theme in the store.\n *\n * @param session - Current Admin session\n * @param options - Options to select a theme:\n *  - header:           the header presented when users select a theme\n *  - filter:           the filter ({@link FilterProps}) applied in the list\n *                      of themes in the store\n *\n * @returns the selected {@link Theme}\n */\nexport async function findOrSelectTheme(session: AdminSession, options: {header?: string; filter: FilterProps}) {\n  const themes = await fetchStoreThemes(session)\n  const filter = new Filter(options.filter)\n  const store = session.storeFqdn\n\n  if (filter.any()) {\n    return filterThemes(store, themes, filter)[0]!\n  }\n\n  return renderSelectPrompt({\n    message: options.header ?? '',\n    choices: themes.map((theme) => {\n      const yoursLabel = theme.id.toString() === getDevelopmentTheme() ? ' [yours]' : ''\n\n      return {\n        value: theme,\n        label: `${theme.name}${yoursLabel}`,\n        group: capitalize(theme.role),\n      }\n    }),\n  })\n}\n\n/**\n * Finds themes in the store.\n *\n * @param session - Current Admin session\n * @param filterProps - The filter ({@link FilterProps}) applied in the list\n *                      of themes in the store\n *\n * @returns a collection of {@link Theme}\n */\nexport async function findThemes(session: AdminSession, filterProps: FilterProps) {\n  const themes = await fetchStoreThemes(session)\n  const filter = new Filter(filterProps)\n  const store = session.storeFqdn\n\n  if (filter.any()) {\n    return filterThemes(store, themes, filter)\n  }\n\n  return []\n}\n"]}