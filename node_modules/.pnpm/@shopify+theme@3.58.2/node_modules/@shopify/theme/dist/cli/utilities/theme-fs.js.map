{"version":3,"file":"theme-fs.js","sourceRoot":"","sources":["../../../src/cli/utilities/theme-fs.ts"],"names":[],"mappings":"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","sourcesContent":["import {checksum} from './asset-checksum.js'\nimport {ThemeFileSystem, Key, ThemeAsset} from '@shopify/cli-kit/node/themes/types'\nimport {glob, readFile, ReadOptions, fileExists, mkdir, writeFile, removeFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath, basename} from '@shopify/cli-kit/node/path'\nimport {lookupMimeType, setMimeTypes} from '@shopify/cli-kit/node/mimes'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\n\nconst DEFAULT_IGNORE_PATTERNS = [\n  '**/.git',\n  '**/.vscode',\n  '**/.hg',\n  '**/.bzr',\n  '**/.svn',\n  '**/_darcs',\n  '**/CVS',\n  '**/*.sublime-(project|workspace)',\n  '**/.DS_Store',\n  '**/.sass-cache',\n  '**/Thumbs.db',\n  '**/desktop.ini',\n  '**/config.yml',\n  '**/node_modules/',\n  '.prettierrc.json',\n]\n\nconst THEME_DIRECTORY_PATTERNS = [\n  'assets/**/*.*',\n  'config/**/*.json',\n  'layout/**/*.liquid',\n  'locales/**/*.json',\n  'sections/**/*.{liquid,json}',\n  'snippets/**/*.liquid',\n  'templates/**/*.{liquid,json}',\n  'templates/customers/**/*.{liquid,json}',\n]\n\nconst THEME_PARTITION_REGEX = {\n  liquidRegex: /\\.liquid$/,\n  configRegex: /^config\\/(settings_schema|settings_data)\\.json$/,\n  jsonRegex: /^(?!config\\/).*\\.json$/,\n  contextualizedJsonRegex: /\\.context\\.[^.]+\\.json$/i,\n  staticAssetRegex: /^assets\\/(?!.*\\.liquid$)/,\n}\n\nexport async function mountThemeFileSystem(root: string): Promise<ThemeFileSystem> {\n  const filesPaths = await glob(THEME_DIRECTORY_PATTERNS, {\n    cwd: root,\n    deep: 3,\n    ignore: DEFAULT_IGNORE_PATTERNS,\n  })\n\n  const assets = await Promise.all(\n    filesPaths.map(async (key) => {\n      return checksum(root, key).then((checksum) => {\n        return {\n          key,\n          checksum,\n        }\n      })\n    }),\n  )\n  const files = new Map(assets.map((asset) => [asset.key, asset]))\n\n  return {\n    root,\n    files,\n  }\n}\n\nexport async function writeThemeFile(root: string, {key, attachment, value}: ThemeAsset) {\n  const absolutePath = joinPath(root, key)\n\n  await ensureDirExists(absolutePath)\n\n  if (attachment) {\n    const data = Buffer.from(attachment, 'base64')\n    await writeFile(absolutePath, data, {encoding: 'base64'})\n  } else {\n    const data = value ?? ''\n    await writeFile(absolutePath, data)\n  }\n}\n\nexport async function readThemeFile(root: string, path: Key): Promise<string | Buffer | undefined> {\n  const options: ReadOptions = isTextFile(path) ? {encoding: 'utf8'} : {}\n  const absolutePath = joinPath(root, path)\n\n  const themeFileExists = await fileExists(absolutePath)\n  if (!themeFileExists) {\n    outputDebug(`File ${absolutePath} can't be read because it doesn't exist...`)\n    return\n  }\n\n  return readFile(absolutePath, options)\n}\n\nexport async function removeThemeFile(root: string, path: Key) {\n  const absolutePath = joinPath(root, path)\n\n  const themeFileExists = await fileExists(absolutePath)\n  if (!themeFileExists) {\n    outputDebug(`File ${absolutePath} can't be removed because it doesn't exist...`)\n    return\n  }\n\n  await removeFile(absolutePath)\n}\n\nexport function isThemeAsset(path: string) {\n  return path.startsWith('assets/')\n}\n\nexport function isJson(path: string) {\n  return lookupMimeType(path) === 'application/json'\n}\n\nexport function partitionThemeFiles(files: ThemeAsset[]) {\n  const liquidFiles: ThemeAsset[] = []\n  const jsonFiles: ThemeAsset[] = []\n  const contextualizedJsonFiles: ThemeAsset[] = []\n  const configFiles: ThemeAsset[] = []\n  const staticAssetFiles: ThemeAsset[] = []\n\n  files.forEach((file) => {\n    const fileKey = file.key\n    if (THEME_PARTITION_REGEX.liquidRegex.test(fileKey)) {\n      liquidFiles.push(file)\n    } else if (THEME_PARTITION_REGEX.configRegex.test(fileKey)) {\n      configFiles.push(file)\n    } else if (THEME_PARTITION_REGEX.jsonRegex.test(fileKey)) {\n      if (THEME_PARTITION_REGEX.contextualizedJsonRegex.test(fileKey)) {\n        contextualizedJsonFiles.push(file)\n      } else {\n        jsonFiles.push(file)\n      }\n    } else if (THEME_PARTITION_REGEX.staticAssetRegex.test(fileKey)) {\n      staticAssetFiles.push(file)\n    }\n  })\n\n  return {liquidFiles, jsonFiles, contextualizedJsonFiles, configFiles, staticAssetFiles}\n}\n\nexport async function readThemeFilesFromDisk(filesToRead: ThemeAsset[], themeFileSystem: ThemeFileSystem) {\n  outputDebug(`Reading theme files from disk: ${filesToRead.map((file) => file.key).join(', ')}`)\n  await Promise.all(\n    filesToRead.map(async (file) => {\n      const fileKey = file.key\n      const themeAsset = themeFileSystem.files.get(fileKey)\n      if (themeAsset === undefined) {\n        outputDebug(`File ${fileKey} can't be was not found under directory starting with: ${themeFileSystem.root}`)\n        return\n      }\n\n      outputDebug(`Reading theme file: ${fileKey}`)\n      const fileData = await readThemeFile(themeFileSystem.root, fileKey)\n      if (Buffer.isBuffer(fileData)) {\n        themeAsset.attachment = fileData.toString('base64')\n      } else {\n        themeAsset.value = fileData\n      }\n      themeFileSystem.files.set(fileKey, themeAsset)\n    }),\n  )\n  outputDebug('All theme files were read from disk')\n}\n\nexport function isTextFile(path: string) {\n  setMimeTypes({\n    liquid: 'application/liquid',\n    sass: 'text/x-sass',\n    scss: 'text/x-scss',\n  })\n\n  const textFileTypes = [\n    'application/javascript',\n    'application/json',\n    'application/liquid',\n    'text/css',\n    'text/x-sass',\n    'text/x-scss',\n  ]\n\n  return textFileTypes.includes(lookupMimeType(path))\n}\n\nexport async function hasRequiredThemeDirectories(path: string) {\n  const directories = new Set(\n    await glob('*', {\n      cwd: path,\n      deep: 1,\n      onlyDirectories: true,\n    }),\n  )\n\n  const requiredDirectories = ['config', 'layout', 'sections', 'templates']\n\n  return requiredDirectories.every((dir) => directories.has(dir))\n}\n\nasync function ensureDirExists(path: string) {\n  const directoryPath = dirPath(path)\n\n  const directoryExists = await fileExists(directoryPath)\n  if (directoryExists) return\n\n  await mkdir(directoryPath)\n}\n\nfunction dirPath(filePath: string) {\n  const fileName = basename(filePath)\n  const fileNameIndex = filePath.lastIndexOf(fileName)\n\n  return filePath.substring(0, fileNameIndex)\n}\n"]}