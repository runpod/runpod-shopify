{"version":3,"file":"theme-uploader.js","sourceRoot":"","sources":["../../../src/cli/utilities/theme-uploader.ts"],"names":[],"mappings":"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","sourcesContent":["import {partitionThemeFiles, readThemeFilesFromDisk} from './theme-fs.js'\nimport {applyIgnoreFilters} from './asset-ignore.js'\nimport {AdminSession} from '@shopify/cli-kit/node/session'\nimport {Result, Checksum, Theme, ThemeFileSystem} from '@shopify/cli-kit/node/themes/types'\nimport {AssetParams, bulkUploadThemeAssets, deleteThemeAsset} from '@shopify/cli-kit/node/themes/api'\nimport {fileSize} from '@shopify/cli-kit/node/fs'\nimport {Task, renderTasks as renderTaskOriginal} from '@shopify/cli-kit/node/ui'\nimport {outputDebug, outputInfo, outputNewline, outputWarn} from '@shopify/cli-kit/node/output'\n\ninterface UploadOptions {\n  path: string\n  nodelete?: boolean\n  ignore?: string[]\n  only?: string[]\n}\ntype FileBatch = Checksum[]\n\n// Limits for Bulk Requests\nexport const MAX_BATCH_FILE_COUNT = 10\n// 100KB\nexport const MAX_BATCH_BYTESIZE = 102400\nexport const MAX_UPLOAD_RETRY_COUNT = 2\n\nexport async function uploadTheme(\n  theme: Theme,\n  session: AdminSession,\n  remoteChecksums: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  options: UploadOptions,\n) {\n  const uploadResults: Map<string, Result> = new Map()\n  const deleteTasks = await buildDeleteTasks(remoteChecksums, themeFileSystem, options, theme, session)\n  const uploadTasks = await buildUploadTasks(remoteChecksums, themeFileSystem, options, theme, session, uploadResults)\n\n  const {jsonTasks, otherTasks} = deleteTasks\n  const {liquidUploadTasks, jsonUploadTasks, contextualizedJsonUploadTasks, configUploadTasks, staticUploadTasks} =\n    uploadTasks\n\n  // The sequence of tasks is important here\n  await renderTasks([...jsonTasks, ...otherTasks])\n\n  await renderTasks([\n    ...liquidUploadTasks,\n    ...jsonUploadTasks,\n    ...contextualizedJsonUploadTasks,\n    ...configUploadTasks,\n    ...staticUploadTasks,\n  ])\n\n  reportFailedUploads(uploadResults)\n  return uploadResults\n}\n\nasync function buildDeleteTasks(\n  remoteChecksums: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  options: UploadOptions,\n  theme: Theme,\n  session: AdminSession,\n) {\n  if (options.nodelete) {\n    return {jsonTasks: [], otherTasks: []}\n  }\n\n  const filteredChecksums = await applyIgnoreFilters(remoteChecksums, themeFileSystem, options)\n\n  const remoteFilesToBeDeleted = await getRemoteFilesToBeDeleted(filteredChecksums, themeFileSystem, options)\n  const {jsonFiles, liquidFiles, configFiles, staticAssetFiles} = partitionThemeFiles(remoteFilesToBeDeleted)\n  const otherFiles = [...liquidFiles, ...configFiles, ...staticAssetFiles]\n\n  const jsonTasks = createDeleteTasks(jsonFiles, theme.id, session)\n  const otherTasks = createDeleteTasks(otherFiles, theme.id, session)\n\n  return {jsonTasks, otherTasks}\n}\n\nasync function getRemoteFilesToBeDeleted(\n  remoteChecksums: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  options: UploadOptions,\n): Promise<Checksum[]> {\n  const localKeys = new Set(themeFileSystem.files.keys())\n  const filteredChecksums = await applyIgnoreFilters(remoteChecksums, themeFileSystem, options)\n  const filesToBeDeleted = filteredChecksums.filter((checksum) => !localKeys.has(checksum.key))\n  outputDebug(`Files to be deleted:\\n${filesToBeDeleted.map((file) => `-${file.key}`).join('\\n')}`)\n  return filesToBeDeleted\n}\n\nfunction createDeleteTasks(files: Checksum[], themeId: number, session: AdminSession): Task[] {\n  return files.map((file) => ({\n    title: `Cleaning your remote theme (removing ${file.key})`,\n    task: async () => deleteFileFromRemote(themeId, file, session),\n  }))\n}\n\nasync function deleteFileFromRemote(themeId: number, file: Checksum, session: AdminSession) {\n  await deleteThemeAsset(themeId, file.key, session)\n}\n\nasync function buildUploadTasks(\n  remoteChecksums: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  options: UploadOptions,\n  theme: Theme,\n  session: AdminSession,\n  uploadResults: Map<string, Result>,\n): Promise<{\n  liquidUploadTasks: Task[]\n  jsonUploadTasks: Task[]\n  contextualizedJsonUploadTasks: Task[]\n  configUploadTasks: Task[]\n  staticUploadTasks: Task[]\n}> {\n  const filesToUpload = await selectUploadableFiles(themeFileSystem, remoteChecksums, options)\n\n  await readThemeFilesFromDisk(filesToUpload, themeFileSystem)\n  const {liquidUploadTasks, jsonUploadTasks, contextualizedJsonUploadTasks, configUploadTasks, staticUploadTasks} =\n    await createUploadTasks(filesToUpload, themeFileSystem, session, theme, uploadResults)\n\n  return {liquidUploadTasks, jsonUploadTasks, contextualizedJsonUploadTasks, configUploadTasks, staticUploadTasks}\n}\n\nasync function createUploadTasks(\n  filesToUpload: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  session: AdminSession,\n  theme: Theme,\n  uploadResults: Map<string, Result>,\n): Promise<{\n  liquidUploadTasks: Task[]\n  jsonUploadTasks: Task[]\n  contextualizedJsonUploadTasks: Task[]\n  configUploadTasks: Task[]\n  staticUploadTasks: Task[]\n}> {\n  const totalFileCount = filesToUpload.length\n  const {jsonFiles, contextualizedJsonFiles, liquidFiles, configFiles, staticAssetFiles} =\n    partitionThemeFiles(filesToUpload)\n\n  const {tasks: liquidUploadTasks, updatedFileCount: liquidCount} = await createUploadTaskForFileType(\n    liquidFiles,\n    themeFileSystem,\n    session,\n    uploadResults,\n    theme.id,\n    totalFileCount,\n    0,\n  )\n  const {tasks: jsonUploadTasks, updatedFileCount: jsonCount} = await createUploadTaskForFileType(\n    jsonFiles,\n    themeFileSystem,\n    session,\n    uploadResults,\n    theme.id,\n    totalFileCount,\n    liquidCount,\n  )\n  const {tasks: contextualizedJsonUploadTasks, updatedFileCount: contextualizedJsonCount} =\n    await createUploadTaskForFileType(\n      contextualizedJsonFiles,\n      themeFileSystem,\n      session,\n      uploadResults,\n      theme.id,\n      totalFileCount,\n      jsonCount,\n    )\n  const {tasks: configUploadTasks, updatedFileCount: configCount} = await createUploadTaskForFileType(\n    configFiles,\n    themeFileSystem,\n    session,\n    uploadResults,\n    theme.id,\n    totalFileCount,\n    contextualizedJsonCount,\n  )\n  const {tasks: staticUploadTasks} = await createUploadTaskForFileType(\n    staticAssetFiles,\n    themeFileSystem,\n    session,\n    uploadResults,\n    theme.id,\n    totalFileCount,\n    configCount,\n  )\n\n  return {liquidUploadTasks, jsonUploadTasks, contextualizedJsonUploadTasks, configUploadTasks, staticUploadTasks}\n}\n\nasync function createUploadTaskForFileType(\n  checksums: Checksum[],\n  themeFileSystem: ThemeFileSystem,\n  session: AdminSession,\n  uploadResults: Map<string, Result>,\n  themeId: number,\n  totalFileCount: number,\n  currentFileCount: number,\n): Promise<{tasks: Task[]; updatedFileCount: number}> {\n  if (checksums.length === 0) {\n    return {tasks: [], updatedFileCount: currentFileCount}\n  }\n\n  const batches = await createBatches(checksums, themeFileSystem.root)\n  const {tasks, updatedFileCount} = await createUploadTaskForBatch(\n    batches,\n    themeFileSystem,\n    session,\n    uploadResults,\n    themeId,\n    totalFileCount,\n    currentFileCount,\n  )\n  return {tasks, updatedFileCount}\n}\n\nfunction createUploadTaskForBatch(\n  batches: FileBatch[],\n  themeFileSystem: ThemeFileSystem,\n  session: AdminSession,\n  uploadResults: Map<string, Result>,\n  themeId: number,\n  totalFileCount: number,\n  currentFileCount: number,\n): {tasks: Task[]; updatedFileCount: number} {\n  let runningFileCount = currentFileCount\n  const tasks = batches.map((batch) => {\n    runningFileCount += batch.length\n    const progress = Math.round((runningFileCount / totalFileCount) * 100)\n    return {\n      title: `Uploading files to remote theme [${progress}%]`,\n      task: async () => uploadBatch(batch, themeFileSystem, session, themeId, uploadResults),\n    }\n  })\n  return {\n    tasks,\n    updatedFileCount: runningFileCount,\n  }\n}\n\nasync function selectUploadableFiles(\n  themeFileSystem: ThemeFileSystem,\n  remoteChecksums: Checksum[],\n  options: UploadOptions,\n): Promise<Checksum[]> {\n  const localChecksums = calculateLocalChecksums(themeFileSystem)\n  const filteredLocalChecksums = await applyIgnoreFilters(localChecksums, themeFileSystem, options)\n  const remoteChecksumsMap = new Map<string, Checksum>()\n  remoteChecksums.forEach((remote) => {\n    remoteChecksumsMap.set(remote.key, remote)\n  })\n\n  const filesToUpload = filteredLocalChecksums.filter((local) => {\n    const remote = remoteChecksumsMap.get(local.key)\n    return !remote || remote.checksum !== local.checksum\n  })\n  outputDebug(`Files to be uploaded:\\n${filesToUpload.map((file) => `-${file.key}`).join('\\n')}`)\n  return filesToUpload\n}\n\nasync function createBatches(files: Checksum[], path: string): Promise<FileBatch[]> {\n  const fileSizes = await Promise.all(files.map((file) => fileSize(`${path}/${file.key}`)))\n  const batches = []\n\n  let currentBatch: Checksum[] = []\n  let currentBatchSize = 0\n\n  files.forEach((file, index) => {\n    const hasEnoughItems = currentBatch.length >= MAX_BATCH_FILE_COUNT\n    const hasEnoughByteSize = currentBatchSize >= MAX_BATCH_BYTESIZE\n\n    if (hasEnoughItems || hasEnoughByteSize) {\n      batches.push(currentBatch)\n      currentBatch = []\n      currentBatchSize = 0\n    }\n\n    currentBatch.push(file)\n    currentBatchSize += fileSizes[index] ?? 0\n  })\n\n  if (currentBatch.length > 0) {\n    batches.push(currentBatch)\n  }\n\n  return batches\n}\n\nfunction calculateLocalChecksums(localThemeFileSystem: ThemeFileSystem): Checksum[] {\n  const checksums: Checksum[] = []\n\n  localThemeFileSystem.files.forEach((value, key) => {\n    checksums.push({\n      key,\n      checksum: value.checksum,\n    })\n  })\n\n  return checksums\n}\n\nasync function uploadBatch(\n  batch: FileBatch,\n  localThemeFileSystem: ThemeFileSystem,\n  session: AdminSession,\n  themeId: number,\n  uploadResults: Map<string, Result>,\n) {\n  const uploadParams = batch.map((file) => {\n    const value = localThemeFileSystem.files.get(file.key)?.value\n    const attachment = localThemeFileSystem.files.get(file.key)?.attachment\n    return {\n      key: file.key,\n      ...(value && {value}),\n      ...(attachment && {attachment}),\n    }\n  })\n  outputDebug(`Uploading the following files:\\n${batch.map((file) => `-${file.key}`).join('\\n')}`)\n  const results = await handleBulkUpload(uploadParams, themeId, session)\n  // store the results in uploadResults, overwriting any existing results\n  results.forEach((result) => {\n    uploadResults.set(result.key, result)\n  })\n}\n\nasync function handleBulkUpload(\n  uploadParams: AssetParams[],\n  themeId: number,\n  session: AdminSession,\n  count = 0,\n): Promise<Result[]> {\n  if (count > 0) {\n    outputDebug(\n      `Retry Attempt ${count}/${MAX_UPLOAD_RETRY_COUNT} for the following files:\n      ${uploadParams.map((param) => `-${param.key}`).join('\\n')}`,\n    )\n  }\n\n  const results = await bulkUploadThemeAssets(themeId, uploadParams, session)\n  outputDebug(\n    `File Upload Results:\\n${results\n      .map((result) => `-${result.key}: ${result.success ? 'success' : 'failure'}`)\n      .join('\\n')}`,\n  )\n\n  const failedUploadResults = results.filter((result) => result.success === false)\n  if (failedUploadResults.length > 0) {\n    outputDebug(\n      `The following files failed to upload:\\n${failedUploadResults.map((param) => `-${param.key}`).join('\\n')}`,\n    )\n    const failedResults = await handleFailedUploads(failedUploadResults, uploadParams, themeId, session, count)\n    return results.concat(failedResults)\n  }\n  return results\n}\n\nasync function handleFailedUploads(\n  failedUploadResults: Result[],\n  uploadParams: AssetParams[],\n  themeId: number,\n  session: AdminSession,\n  count: number,\n): Promise<Result[]> {\n  const failedUploadsSet = new Set(failedUploadResults.map((result) => result.key))\n  const failedUploadParams = uploadParams.filter((param) => failedUploadsSet.has(param.key))\n\n  if (count === MAX_UPLOAD_RETRY_COUNT) {\n    outputDebug(\n      `Max retry count reached for the following files:\\n${failedUploadParams\n        .map((param) => `-${param.key}`)\n        .join('\\n')}`,\n    )\n    return failedUploadResults\n  }\n\n  return handleBulkUpload(failedUploadParams, themeId, session, count + 1)\n}\n\nasync function renderTasks(tasks: Task[]) {\n  if (tasks.length > 0) {\n    await renderTaskOriginal(tasks)\n  }\n}\n\nfunction reportFailedUploads(uploadResults: Map<string, Result>) {\n  for (const [key, result] of uploadResults.entries()) {\n    if (!result.success) {\n      const errorMessage = result.errors?.asset?.map((err) => `-${err}`).join('\\n')\n      outputWarn(`Failed to upload file ${key}:`)\n      outputInfo(`${errorMessage}`)\n      outputNewline()\n    }\n  }\n}\n"]}